// ====================================================================
//                        SZENEN DEKORATION MODULE
// ====================================================================
// ZWECK DIESES MODULS:
// Diese Datei erstellt alle dekorativen 3D-Objekte, die das Portal umgeben
// und der Szene Leben und Atmosph√§re verleihen. Ohne diese Dekorationen
// w√§re das Portal alleine in einem leeren, schwarzen Raum.
//
// WAS WIRD ERSTELLT:
// ‚Ä¢ Torus-Ringe: 3 rotierende Donut-f√∂rmige Ringe um das Portal
// ‚Ä¢ Hintergrund-S√§ulen: 6 S√§ulen die im Kreis um die Szene stehen
// ‚Ä¢ Partikel-System: 600 schwebende Lichtpunkte f√ºr Weltraum-Atmosph√§re
//
// WARUM DIESE OBJEKTE:
// ‚Ä¢ Torus-Ringe: Verst√§rken die Portal-Magie, leiten Blick zum Zentrum
// ‚Ä¢ S√§ulen: Geben r√§umliche Orientierung, wie S√§ulen in einem Tempel
// ‚Ä¢ Partikel: Erzeugen Tiefe und Bewegung, wie Sterne im Weltraum
//
// TECHNISCHE UMSETZUNG:
// ‚Ä¢ THREE.Group: Container um mehrere Objekte zusammen zu verwalten
// ‚Ä¢ BufferGeometry: Effiziente Geometrie f√ºr viele Partikel
// ‚Ä¢ Float32Array: Optimierte Arrays f√ºr GPU-Performance
// ‚Ä¢ HSL-Farben: Farbton/S√§ttigung/Helligkeit f√ºr sch√∂ne Farbverl√§ufe
//
// ZUSAMMENHANG MIT ANDEREN DATEIEN:
// ‚Üí main.js: Ruft alle create-Funktionen auf und startet Animationen
// ‚Üí scene.js: Alle Dekorationen werden in die dortige Szene eingef√ºgt
// ‚Üí camera.js: Kamera-Bewegungen ber√ºcksichtigen die Objektpositionen
//
// PERFORMANCE-HINWEISE:
// ‚Ä¢ Partikel-Anzahl ist konfigurierbar (Standard: 600)
// ‚Ä¢ BufferGeometry ist GPU-optimiert f√ºr viele Objekte
// ‚Ä¢ Animationen verwenden requestAnimationFrame f√ºr 60 FPS
// ====================================================================

import * as THREE from 'three';

// ====================================================================
//                        TORUS RINGE (Portal-Umrandung)
// ====================================================================

/**
 * Erstellt rotierende Torus-Ringe um das Portal
 * @param {THREE.Scene} scene - Die 3D-Szene
 * @returns {THREE.Group} Gruppe mit allen Torus-Ringen
 */
export function createTorusRings(scene) {
  console.log('üç© Erstelle rotierende Torus-Ringe...');
  
  // Group Container - alle Ringe zusammen verwalten
  const torusGroup = new THREE.Group();
  
  // 3 konzentrische Ringe mit unterschiedlichen Gr√∂√üen erstellen
  for (let i = 0; i < 3; i++) {
    const radius = 1.6 + i * 0.35;          // Gr√∂√üer werdende Radien: 1.6, 1.95, 2.3
    const tubeRadius = 0.03 + i * 0.01;     // Dickere Rohre: 0.03, 0.04, 0.05
    
    // Torus Geometry - Donut-Form
    // Parameter: Haupt-Radius, Rohr-Radius, Rohr-Segmente, Ring-Segmente
    const geometry = new THREE.TorusGeometry(radius, tubeRadius, 16, 120);
    
    // Material mit Farbverlauf (Blau-T√∂ne)
    const hue = 0.6 - i * 0.05;           // Farbton wird pro Ring leicht verschoben
    const material = new THREE.MeshBasicMaterial({
      color: new THREE.Color().setHSL(hue, 0.9, 0.6), // HSL: Farbton, S√§ttigung, Helligkeit
      transparent: true,
      opacity: 0.85                       // Leicht transparent
    });
    
    // Mesh erstellen und positionieren
    const mesh = new THREE.Mesh(geometry, material);
    mesh.rotation.x = Math.PI * 0.5;      // Um 90¬∞ drehen (steht aufrecht)
    mesh.receiveShadow = false;           // Keine Schatten empfangen
    mesh.castShadow = false;              // Keine Schatten werfen
    
    torusGroup.add(mesh);
  }
  
  // Torus-Ringe sollen hinter dem Portal sein, aber sichtbar
  torusGroup.renderOrder = 100;   // Sichtbar, aber weniger als Portal (1000)
  torusGroup.position.z = -0.05;  // Nur minimal nach hinten
  
  scene.add(torusGroup);
  return torusGroup;
}

// ====================================================================
//                        HINTERGRUND S√ÑULEN
// ====================================================================

/**
 * Erstellt schwebende S√§ulen als Hintergrund-Dekoration
 * @param {THREE.Scene} scene - Die 3D-Szene
 */
export function createBackgroundColumns(scene) {
  console.log('üèõÔ∏è Erstelle Hintergrund-S√§ulen...');
  
  // Zylinder-Geometrie f√ºr S√§ulen
  // Parameter: Radius-Oben, Radius-Unten, H√∂he, Segmente
  const columnGeometry = new THREE.CylinderGeometry(0.06, 0.06, 3, 18);
  
  // Dunkles, leicht leuchtende Material
  const columnMaterial = new THREE.MeshStandardMaterial({
    color: 0x09202b,           // Dunkelblaue Grundfarbe
    emissive: 0x00303f,        // Schwaches bl√§uliches Leuchten
    metalness: 0.2,            // Leicht metallisch
    roughness: 0.4,            // Mittlere Oberfl√§chenrauhigkeit
    emissiveIntensity: 0.8     // Leuchtst√§rke
  });
  
  // 6 S√§ulen im Kreis um das Portal verteilen
  for (let i = 0; i < 6; i++) {
    const mesh = new THREE.Mesh(columnGeometry, columnMaterial);
    
    // Position im Kreis berechnen
    const angle = (i / 6) * Math.PI * 2;  // 60¬∞ Abst√§nde
    mesh.position.set(
      Math.cos(angle) * 6.5,               // X: Kreis mit Radius 6.5
      -0.6 + Math.sin(i) * 0.3,           // Y: Leicht variierte H√∂he
      Math.sin(angle) * 5.0 - 1.5          // Z: Kreis versetzt nach hinten
    );
    
    // Rotation f√ºr nat√ºrlichere Verteilung
    mesh.rotation.y = angle + Math.PI * 0.2;
    
    // H√∂he leicht variieren (abwechselnd)
    mesh.scale.y = 0.9 + (i % 2) * 0.3;
    
    // S√§ulen hinter Portal rendern
    mesh.renderOrder = -200;
    
    scene.add(mesh);
  }
}

// ====================================================================
//                        PARTIKEL SYSTEM
// ====================================================================

/**
 * Erstellt schwebende Partikel um das Portal
 * @param {THREE.Scene} scene - Die 3D-Szene
 * @returns {THREE.Points} Partikel-System f√ºr Animationen
 */
export function createParticleSystem(scene) {
  console.log('‚ú® Erstelle Partikel-System...');
  
  const particleCount = 600;
  
  // Float32Array f√ºr optimale GPU-Performance
  // Jeder Partikel hat 3 Werte (x, y, z) ‚Üí 600 √ó 3 = 1800 Werte
  const positions = new Float32Array(particleCount * 3);
  
  // Zuf√§llige Positionen in 3D-Raum generieren
  for (let i = 0; i < particleCount; i++) {
    // Sph√§rische Koordinaten f√ºr gleichm√§√üige Verteilung
    const radius = 15.0 + Math.random() * 25.0;    // SEHR WEIT WEG! (8.0‚Üí15.0, 15.0‚Üí25.0)
    const theta = Math.random() * Math.PI * 2;      // Winkel horizontal (0-360¬∞)
    const phi = (Math.random() - 0.5) * Math.PI;    // Winkel vertikal (-90¬∞ bis 90¬∞)
    
    // Sph√§rische ‚Üí Kartesische Koordinaten umwandeln
    positions[i * 3] = Math.cos(theta) * Math.cos(phi) * radius;        // X
    positions[i * 3 + 1] = Math.sin(phi) * radius * 0.4;               // Y (flacher)
    positions[i * 3 + 2] = Math.sin(theta) * Math.cos(phi) * radius - 10; // Z: VIEL WEITER HINTEN! (-10)
  }
  
  // Buffer Geometry - effiziente Geometrie f√ºr viele Punkte
  const particleGeometry = new THREE.BufferGeometry();
  particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
  
  // Point Material - f√ºr einzelne Punkte/Partikel
  const particleMaterial = new THREE.PointsMaterial({
    color: 0xaaffff,          // Hellblau
    size: 0.012,              // GR√ñ√üER aber nicht zu gro√ü! (0.002 ‚Üí 0.012)
    transparent: true,
    opacity: 0.7              // Sichtbarer (0.3 ‚Üí 0.7)
  });
  
  // Points Objekt erstellen
  const particles = new THREE.Points(particleGeometry, particleMaterial);
  
  // WICHTIG: Partikel im Hintergrund rendern!
  particles.renderOrder = -1000;  // Sehr niedrige Priorit√§t = im Hintergrund
  particles.position.z = -2;      // Zus√§tzlich nach hinten verschieben
  
  scene.add(particles);
  
  return particles;
}

// ====================================================================
//                      DEKORATION ANIMATIONEN
// ====================================================================

/**
 * Aktualisiert alle dekorativen Animationen
 * @param {THREE.Group} torusGroup - Die Torus-Ringe Gruppe
 * @param {THREE.Points} particles - Das Partikel-System
 * @param {number} time - Aktuelle Zeit in Sekunden
 * @param {number} speed - Animations-Geschwindigkeit
 */
export function updateDecorations(torusGroup, particles, time, speed) {
  // Torus-Ringe rotieren (jeder Ring unterschiedlich schnell)
  if (torusGroup) {
    torusGroup.children.forEach((mesh, i) => {
      mesh.rotation.z += 0.0025 * (1 + i * 0.6) * speed;
    });
  }
  
  // Partikel langsam um Y-Achse rotieren
  if (particles) {
    particles.rotation.y = time * 0.02;
  }
}