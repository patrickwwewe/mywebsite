// ====================================================================
//                        PORTAL INTERAKTION MODULE
// ====================================================================
// ZWECK DIESES MODULS:
// Diese Datei macht das Portal interaktiv! Sie erkennt wenn der Benutzer
// auf das Portal klickt und startet dann eine spektakul√§re Aktivierungs-
// sequenz mit Flug-Animation und Men√º-Anzeige.
//
// WAS PASSIERT BEI EINEM KLICK:
// 1. Raycasting erkennt Klick auf Portal-Geometrie
// 2. Portal-Aktivierung mit dramatischen Effekten startet
// 3. Kamera fliegt durch das Portal (enterPortal Animation)
// 4. Farben wechseln von Magenta‚ÜíGold zu Cyan‚ÜíPurple
// 5. Bloom-Effekt wird verst√§rkt f√ºr dramatische Wirkung
// 6. Flash-Overlay erscheint in der Mitte der Animation
// 7. Radiales Navigationsmen√º wird nach der Animation gezeigt
//
// TECHNISCHE UMSETZUNG:
// ‚Ä¢ Raycaster: "Schie√üt" einen Strahl von Kamera durch Mausposition
// ‚Ä¢ Intersection: Pr√ºft ob der Strahl das Portal-Mesh trifft
// ‚Ä¢ requestAnimationFrame: F√ºr smooth 60fps Animationen
// ‚Ä¢ CSS-Klassen: Steuert Sichtbarkeit von UI-Elementen
// ‚Ä¢ Event-Listener: Horcht auf Maus/Touch-Events
//
// BENUTZER-ERFAHRUNG:
// ‚Ä¢ Sofortiges Feedback auf Klick (keine Verz√∂gerung)
// ‚Ä¢ Cinematic Portal-Durchflug f√ºr "Wow"-Effekt
// ‚Ä¢ Smooth √úberg√§nge zwischen allen Zust√§nden
// ‚Ä¢ Mobile-Touch und Desktop-Maus funktionieren gleich
//
// ZUSAMMENHANG MIT ANDEREN DATEIEN:
// ‚Üí main.js: Ruft initializePortalInteraction() beim Start auf
// ‚Üí portal.js: Verwendet changePortalColors() f√ºr Farbwechsel
// ‚Üí camera.js: K√∂nnte Kamera-Presets f√ºr verschiedene Ansichten nutzen
// ‚Üí styles.css: Manipuliert CSS-Klassen f√ºr UI-Sichtbarkeit (.active)
//
// ZUSTANDS-MANAGEMENT:
// ‚Ä¢ portalActivated: Verhindert Doppel-Aktivierung
// ‚Ä¢ isAnimating: Blockiert Interaktion w√§hrend Animationen
// ‚Ä¢ entering: Verhindert mehrfache Flug-Animationen gleichzeitig
// ====================================================================

import * as THREE from 'three';
import { changePortalColors } from './portal.js';
import { activateTunnel } from './tunnel.js';

// Erweiterte Effekte werden dynamisch geladen (falls verf√ºgbar)

// ====================================================================
//                        INTERAKTIONS-SETUP
// ====================================================================

// Globale Variablen f√ºr Portal-Status
let portalActivated = false;     // Wurde das Portal bereits aktiviert?
let isAnimating = false;         // L√§uft gerade eine Animation?
let entering = false;            // L√§uft gerade die Flug-Animation?
let mainScene = null;            // Referenz zur Hauptszene

// Raycasting f√ºr Maus-Interaktionen
const raycaster = new THREE.Raycaster();
const mouse = new THREE.Vector2();

// Hover-State f√ºr Portal
let isHovering = false;
let hoverAnimationId = null;
let hoverStartTime = 0;
let portal = null;
let camera = null;

/**
 * Initialisiert Portal-Interaktionen und Event-Listener
 * @param {THREE.Mesh} portalMesh - Das Portal-Mesh zum Klicken
 * @param {THREE.PerspectiveCamera} camera - Die Szenen-Kamera
 * @param {Object} portalUniforms - Portal-Shader Uniforms
 * @param {Object} bloomPass - Bloom Post-Processing Pass
 * @param {THREE.Scene} scene - Die Hauptszene
 */
export function initializePortalInteraction(portalMesh, cameraRef, portalUniforms, bloomPass, scene) {
  console.log('üñ±Ô∏è Initialisiere Portal-Interaktionen...');
  
  // Referenzen speichern
  portal = portalMesh;
  camera = cameraRef;
  mainScene = scene;
  
  // Event Listener f√ºr Maus-Movement (Hover-Effekte)
  window.addEventListener('pointermove', (event) => {
    if (isAnimating) return;
    
    // Maus-Position updaten
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    
    // Raycasting f√ºr Hover-Detection
    raycaster.setFromCamera(mouse, cameraRef);
    const intersects = raycaster.intersectObject(portalMesh);
    
    if (intersects.length > 0) {
      // √úber Portal hovern
      if (!isHovering) {
        startHoverEffect();
      }
    } else {
      // Nicht √ºber Portal
      if (isHovering) {
        stopHoverEffect();
      }
    }
  });
  
  // Event Listener f√ºr Maus/Touch-Klicks
  window.addEventListener('pointerdown', (event) => {
    if (isAnimating) return; // Keine Doppel-Aktivierung w√§hrend Animation
    
    // Maus-Koordinaten in normalisierte Device Coordinates (-1 bis 1)
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    
    // Raycaster von Kamera durch Maus-Position
    raycaster.setFromCamera(mouse, camera);
    const intersects = raycaster.intersectObject(portalMesh);
    
    // Portal getroffen und noch nicht aktiviert?
    if (intersects.length > 0 && !portalActivated) {
      activatePortal(camera, portalUniforms, bloomPass);
    }
  });
}

// ====================================================================
//                      PORTAL AKTIVIERUNG
// ====================================================================

/**
 * Hauptfunktion f√ºr Portal-Aktivierung mit allen Effekten
 * @param {THREE.PerspectiveCamera} camera - Die Kamera f√ºr Flug-Animation
 * @param {Object} portalUniforms - Portal-Shader Uniforms
 * @param {Object} bloomPass - Bloom-Effekt Pass
 */
export function activatePortal(camera, portalUniforms, bloomPass) {
  if (isAnimating || portalActivated) return;
  
  console.log('üöÄ AKTIVIERE ULTIMATIVES SCI-FI PORTAL MIT ALLEN EFFEKTEN!');
  
  isAnimating = true;
  portalActivated = true;

  // ================================================================
  // üîä ERWEITERTE EFFEKTE (FALLS VERF√úGBAR)
  // ================================================================
  
  // Audio-Effekte
  try {
    if (window.audioModule) {
      window.audioModule.playPortalActivationSound();
      console.log('üîä Portal-Audio aktiviert!');
    }
  } catch (e) { console.log('‚ö†Ô∏è Audio √ºbersprungen'); }
  
  // Screen-Shake
  try {
    if (window.shakeModule) {
      window.shakeModule.startPortalActivationShake();
      console.log('üì≥ Portal-Shake aktiviert!');
    }
  } catch (e) { console.log('‚ö†Ô∏è Shake √ºbersprungen'); }
  
  // Particle-Explosion
  try {
    if (window.particleModule) {
      window.particleModule.createPortalActivationBurst(portal ? portal.position : new THREE.Vector3(0, 0, 0));
      console.log('üí• Portal-Explosion aktiviert!');
    }
  } catch (e) { console.log('‚ö†Ô∏è Partikel √ºbersprungen'); }

  // ================================================================
  // UI-UPDATES - Hint ausblenden
  // ================================================================
  const portalHint = document.querySelector('.hint');
  if (portalHint) {
    portalHint.style.opacity = '0';
  }

  // ================================================================
  // FLUG-ANIMATION durch Portal starten
  // ================================================================
  enterPortal(camera);

  // ================================================================
  // PORTAL FARB-ANIMATION (parallel zur Flug-Animation)
  // ================================================================
  const activationDuration = 2000;
  const startTime = performance.now();
  
  // Ausgangfarben speichern
  const startColors = {
    a: portalUniforms.colorA.value.clone(),
    b: portalUniforms.colorB.value.clone()
  };

  // Zielfarben (Magenta‚ÜíGold zu Cyan‚ÜíPurple)
  const targetColors = {
    a: new THREE.Color('#00f0ff'), // Cyan
    b: new THREE.Color('#9b00ff')  // Purple
  };

  function animateActivation() {
    const elapsed = performance.now() - startTime;
    const progress = Math.min(elapsed / activationDuration, 1);
    
    // Smooth Easing f√ºr weiche Animation
    const eased = 1 - Math.pow(1 - progress, 3);
    
    // Farb√ºberg√§nge
    portalUniforms.colorA.value.lerpColors(startColors.a, targetColors.a, eased);
    portalUniforms.colorB.value.lerpColors(startColors.b, targetColors.b, eased);
    
    // Bloom-Effekt verst√§rken f√ºr dramatischen Effekt
    bloomPass.strength = 2.9 + eased * 1.0;
    
    if (progress < 1) {
      requestAnimationFrame(animateActivation);
    } else {
      // Animation beendet - KEIN Men√º mehr! Nur Portal-Animation
      console.log('üéØ Portal-Farb-Animation abgeschlossen');
      isAnimating = false;
    }
  }

  animateActivation();
}

// ====================================================================
//                        KAMERA FLUG-ANIMATION
// ====================================================================

/**
 * Animiert Kamera-Flug durch das Portal mit Flash-Effekt
 * @param {THREE.PerspectiveCamera} camera - Die zu animierende Kamera
 */
function enterPortal(camera) {
  if (entering) return;
  entering = true;
  
  console.log('üöÄ Starte ULTIMATIVEN HYPERSPACE-FLUG!');
  
  // ================================================================
  // ÔøΩ HYPERSPACE-EFFEKTE (FALLS VERF√úGBAR)
  // ================================================================
  
  // Hyperspace-Audio
  try {
    if (window.audioModule) {
      window.audioModule.startHyperspaceSound();
      console.log('üîä Hyperspace-Audio gestartet!');
    }
  } catch (e) { console.log('‚ö†Ô∏è Hyperspace-Audio √ºbersprungen'); }
  
  // Hyperspace-Shake
  try {
    if (window.shakeModule) {
      window.shakeModule.startHyperspaceEntryShake();
      console.log('üì≥ Hyperspace-Shake gestartet!');
    }
  } catch (e) { console.log('‚ö†Ô∏è Hyperspace-Shake √ºbersprungen'); }
  
  // Hyperspace-Explosion
  try {
    if (window.particleModule) {
      window.particleModule.createHyperspaceEntryExplosion(new THREE.Vector3(0, 0, 0));
      console.log('üí• Hyperspace-Explosion gestartet!');
    }
  } catch (e) { console.log('‚ö†Ô∏è Hyperspace-Explosion √ºbersprungen'); }
  
  // ‚ö° HYPERSPACE-TUNNEL AKTIVIEREN! (ULTRA-SCHNELL!)
  activateTunnel(true, 3.5, mainScene); // Aktiviert mit 3.5x Geschwindigkeit! (2.5 ‚Üí 3.5)
  console.log('üå™Ô∏è ULTRA-SCHNELLER Hyperspace-Tunnel AKTIV!');
  
  const startPos = camera.position.clone();          // Startposition merken  
  const targetPos = new THREE.Vector3(0, 0, -50);    // Ziel: VIEL WEITER in die Ferne! (bleibt bei -50)
  const duration = 2500;                             // Animation dauert 2.5 SEKUNDEN! (noch schneller: 4s ‚Üí 2.5s)
  const startTime = performance.now();
  
  // Flash-Element f√ºr dramatischen Effekt
  const flashEl = document.getElementById('flash');
  console.log('üîç Flash-Element gefunden:', flashEl);
  
  function animateFrame(time) {
    const elapsed = time - startTime;
    const progress = Math.min(1, elapsed / duration);
    
    // Kamera-Position interpolieren (smooth)
    camera.position.lerpVectors(startPos, targetPos, progress);
    camera.lookAt(0, 0, 0); // Immer zum Portal schauen
    
    //TUNNEL-EFFEKT ULTRA-SCHNELL! Von 5% bis 85% (2 Sekunden!)
    if (progress >= 0.05 && progress < 0.85) {
      //TunnelProgress wird berechnet - ULTRA-SCHNELL!
      const tunnelProgress = (progress - 0.05) / 0.8; //0.05 (5%) bis 0.85 (85%) = 80% der 2.5s Animation!
      //Tunnel-VISION
      const baseFOV = 75; //Normal =75¬∞ sichtwinkel (breit)
      const tunnelFOV = baseFOV - (tunnelProgress * 30); //wird enger!
      camera.fov = tunnelFOV; //Kamera FOV setzen - DAS WAR'S!
      camera.updateProjectionMatrix(); //Matrix updaten - AUCH WICHTIG!
      
      //Kamera Shake
      const shakeIntensity = tunnelProgress * 0.02; //St√§rke berrechnen
      camera.position.x += (Math.random() - 0.5) * shakeIntensity;  //zuf√§llige Kamera bewegung x-Achse
      camera.position.y += (Math.random() - 0.5) * shakeIntensity;  //zuf√§llige Kamera bewegung y-Achse  
      camera.position.z += (Math.random() - 0.5) * shakeIntensity;  //zuf√§llige Kamera bewegung z-Achse
      
    
    }

    // MICRO-BLITZ bei 85% der Animation! ‚ö° (fr√ºher weil schneller)
    if (progress >= 0.85 && flashEl && (flashEl.style.opacity === '0' || flashEl.style.opacity === '')) {
      console.log('‚ö° ULTIMATIVER MICRO-BLITZ MIT ALLEN EFFEKTEN!');
      
      // ================================================================
      // ‚ö° FLASH-EFFEKTE (FALLS VERF√úGBAR)
      // ================================================================
      
      // Flash-Audio
      try {
        if (window.audioModule) {
          window.audioModule.playFlashZapSound();
          console.log('üîä Flash-Audio gespielt!');
        }
      } catch (e) { console.log('‚ö†Ô∏è Flash-Audio √ºbersprungen'); }
      
      // Flash-Shake
      try {
        if (window.shakeModule) {
          window.shakeModule.startFlashImpactShake();
          console.log('üì≥ Flash-Shake gestartet!');
        }
      } catch (e) { console.log('‚ö†Ô∏è Flash-Shake √ºbersprungen'); }
      
      // Flash-Explosion
      try {
        if (window.particleModule) {
          window.particleModule.createFlashSparkExplosion(new THREE.Vector3(0, 0, 0));
          console.log('üí• Flash-Explosion gespielt!');
        }
      } catch (e) { console.log('‚ö†Ô∏è Flash-Explosion √ºbersprungen'); }
      
      // Visueller Flash
      flashEl.style.transition = 'opacity 2ms ease'; // INSTANT!
      flashEl.style.opacity = '1';  // Flash wird sichtbar
      console.log('‚ö° ZACK! ALLE EFFEKTE GLEICHZEITIG!');
    }
    
    // Animation fortsetzen oder beenden
    if (progress < 1) {
      requestAnimationFrame(animateFrame);
    } else {
      // Animation beendet - STUFENWEISER √úBERGANG f√ºr cinematischen Effekt!
      
      // MINI-BLITZ! ‚ö° (Kaum sichtbar!)
      setTimeout(() => {
        if (flashEl) {
          console.log('‚ö° MINI-BLITZ weg!');
          flashEl.style.transition = 'opacity 5ms ease'; // EXTREM schnell!
          flashEl.style.opacity = '0';
        }
      }, 1); // Blitz nur 1ms!
      
      // Portal mit Aufgeh-Animation zur√ºckbringen!
      setTimeout(() => {
        // ‚ö° Tunnel weg, Portal mit Animation zur√ºck!
        activateTunnel(false, 1.0, mainScene);
        console.log('üåü Portal geht auf mit Animation!');
        
        // Kamera zur√ºck zur Startposition
        camera.position.copy(startPos);
        
        // PORTAL-AUFGEH-ANIMATION! 
        animatePortalReturn();
        
        entering = false;
      }, 4); // Portal kommt SOFORT nach micro-Blitz!
    }
  }
  
  requestAnimationFrame(animateFrame);
}

// ====================================================================
//                    PORTAL-AUFGEH-ANIMATION
// ====================================================================

/**
 * Animiert das Portal beim Zur√ºckkehren aus dem Tunnel
 */
function animatePortalReturn() {
  console.log('üåü Starte Portal-Aufgeh-Animation...');
  
  // Finde das Portal-Mesh in der Szene
  const portalMesh = mainScene.children.find(child => 
    child.type === 'Mesh' && child.geometry && child.geometry.type === 'PlaneGeometry'
  );
  
  if (!portalMesh) {
    console.log('‚ùå Portal-Mesh nicht gefunden');
    return;
  }
  
  // Portal startet unsichtbar und klein
  portalMesh.scale.set(0.1, 0.1, 1);
  portalMesh.material.opacity = 0;
  
  // L√§ngere, cinematischere Animation
  const duration = 1200; // 1200ms = 1.2 Sekunden (viel l√§nger!)
  const startTime = performance.now();
  
  function animateReturn(time) {
    const elapsed = time - startTime;
    const progress = Math.min(1, elapsed / duration);
    
    // Smooth Easing (Bounce-Effekt)
    const eased = 1 - Math.pow(1 - progress, 3);
    
    // Portal wird gr√∂√üer und sichtbarer
    const scale = 0.1 + (eased * 0.9); // Von 0.1 zu 1.0
    portalMesh.scale.set(scale, scale, 1);
    portalMesh.material.opacity = eased; // Von 0 zu 1
    
    // Leichte Rotation f√ºr dramatischen Effekt
    portalMesh.rotation.z = (1 - eased) * Math.PI * 0.2;
    
    if (progress < 1) {
      requestAnimationFrame(animateReturn);
    } else {
      // Animation beendet
      portalMesh.scale.set(1, 1, 1);
      portalMesh.material.opacity = 1;
      portalMesh.rotation.z = 0;
      console.log('‚úÖ Portal-Animation abgeschlossen!');
    }
  }
  
  requestAnimationFrame(animateReturn);
}

// ====================================================================
//                      PORTAL ZUR√úCKSETZEN
// ====================================================================

/**
 * Portal ist zur√ºck - keine weiteren Aktionen n√∂tig (Men√º entfernt!)
 */
function resetPortalState() {
  console.log('üéØ Portal-Status zur√ºckgesetzt - bereit f√ºr n√§chste Aktivierung');
  // Portal kann wieder geklickt werden - kein Men√º mehr!
}

// ====================================================================
//                      STATUS ABFRAGEN
// ====================================================================

/**
 * Gibt zur√ºck, ob das Portal bereits aktiviert wurde
 * @returns {boolean} Portal-Status
 */
export function isPortalActivated() {
  return portalActivated;
}

/**
 * Gibt zur√ºck, ob gerade eine Animation l√§uft
 * @returns {boolean} Animations-Status
 */
export function isPortalAnimating() {
  return isAnimating;
}

// ====================================================================
//                        HOVER-EFFEKTE
// ====================================================================

/**
 * Startet Hover-Effekt beim Portal
 */
function startHoverEffect() {
  isHovering = true;
  hoverStartTime = Date.now();
  
  // Cursor √§ndern
  document.body.style.cursor = 'pointer';
  
  // Portal-Pulsing Animation
  startHoverAnimation();
  
  console.log('‚ú® Portal-Hover gestartet');
}

/**
 * Stoppt Hover-Effekt
 */
function stopHoverEffect() {
  isHovering = false;
  
  // Cursor zur√ºcksetzen
  document.body.style.cursor = 'default';
  
  // Animation stoppen
  if (hoverAnimationId) {
    cancelAnimationFrame(hoverAnimationId);
    hoverAnimationId = null;
  }
  
  // Portal zur√ºcksetzen
  if (portal) {
    portal.scale.set(1, 1, 1);
    if (portal.material && portal.material.uniforms && portal.material.uniforms.glowIntensity) {
      portal.material.uniforms.glowIntensity.value = 1.0;
    }
  }
  
  console.log('üåô Portal-Hover gestoppt');
}

/**
 * Hover-Animation Loop
 */
function startHoverAnimation() {
  if (!isHovering) return;
  
  const elapsedTime = (Date.now() - hoverStartTime) * 0.001;
  
  // Sanftes Pulsing des Portals
  if (portal && portal.material && portal.material.uniforms) {
    const pulseIntensity = 1.2 + Math.sin(elapsedTime * 3) * 0.3;
    
    // Portal-Helligkeit pulsieren lassen
    if (portal.material.uniforms.glowIntensity) {
      portal.material.uniforms.glowIntensity.value = pulseIntensity;
    }
    
    // Leichte Gr√∂√üen-Variation
    const scaleVariation = 1.0 + Math.sin(elapsedTime * 2) * 0.05;
    portal.scale.set(scaleVariation, scaleVariation, 1);
  }
  
  // Kontinuierliche Animation
  hoverAnimationId = requestAnimationFrame(() => startHoverAnimation());
}

/**
 * Exportierte Update-Funktion f√ºr Hover-Effekte
 */
export function updateHoverEffects() {
  // Falls n√∂tig f√ºr zus√§tzliche Hover-Updates
  if (isHovering && portal) {
    // Zus√§tzliche Hover-Logik hier
  }
}