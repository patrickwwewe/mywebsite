// ====================================================================
//                           SZENE SETUP MODULE
// ====================================================================
// ZWECK DIESES MODULS:
// Diese Datei erstellt die grundlegende 3D-Szene mit Three.js und ist
// das Fundament f√ºr alle anderen 3D-Objekte im Portal.
// 
// WAS PASSIERT HIER:
// ‚Ä¢ Renderer-Setup: Wandelt 3D-Geometrie in 2D-Pixel f√ºr den Bildschirm
// ‚Ä¢ Kamera-Erstellung: Definiert den Blickwinkel in die 3D-Welt
// ‚Ä¢ Szenen-Container: Ein leerer 3D-Raum, in den Objekte eingef√ºgt werden
// ‚Ä¢ Beleuchtung: Lichtquellen, damit 3D-Objekte sichtbar und schattiert werden
// ‚Ä¢ Post-Processing: Nachbearbeitung f√ºr Glow- und Bloom-Effekte
//
// ZUSAMMENHANG MIT ANDEREN DATEIEN:
// ‚Üí main.js: Importiert diese Funktionen und ruft sie beim Start auf
// ‚Üí portal.js: Das Portal wird in die hier erstellte Szene eingef√ºgt
// ‚Üí decorations.js: Torus-Ringe und Partikel werden hier hinzugef√ºgt
// ‚Üí interactions.js: Verwendet die Kamera f√ºr Raycasting (Klick-Erkennung)
//
// ANALOGIE:
// Stell dir vor, du baust eine Filmszene:
// ‚Ä¢ Scene = leeres Filmstudio
// ‚Ä¢ Camera = Filmkamera
// ‚Ä¢ Renderer = entwickelt den Film
// ‚Ä¢ Lights = Studiobeleuchtung
// ====================================================================

import * as THREE from 'three';
import { EffectComposer } from 'https://unpkg.com/three@0.152.0/examples/jsm/postprocessing/EffectComposer.js';
import { RenderPass } from 'https://unpkg.com/three@0.152.0/examples/jsm/postprocessing/RenderPass.js';
import { UnrealBloomPass } from 'https://unpkg.com/three@0.152.0/examples/jsm/postprocessing/UnrealBloomPass.js';

// ====================================================================
//                        SZENE INITIALISIERUNG
// ====================================================================

/**
 * Erstellt und konfiguriert die grundlegende 3D-Szene
 * @returns {Object} Objekt mit scene, camera, renderer, composer
 */
export function initializeScene() {
  console.log('üé¨ Initialisiere 3D-Szene...');
  
  // Canvas-Element holen
  const canvas = document.getElementById('c');
  
  // Szene erstellen - das ist die 3D-Welt
  const scene = new THREE.Scene();
  
  // Kamera erstellen - das ist unser Blickwinkel
  // Parameter: FOV (50¬∞), Seitenverh√§ltnis, Near-Plane, Far-Plane
  const camera = new THREE.PerspectiveCamera(50, innerWidth / innerHeight, 0.1, 200);
  camera.position.set(0, 0, 6); // Kamera 6 Einheiten vor dem Portal positionieren
  
  // Renderer erstellen - wandelt 3D in 2D-Pixel um
  const renderer = new THREE.WebGLRenderer({ 
    canvas, 
    antialias: true,    // Gl√§ttet scharfe Kanten
    alpha: true         // Transparenter Hintergrund m√∂glich
  });
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Hochaufl√∂sende Displays
  renderer.setSize(innerWidth, innerHeight);
  renderer.toneMappingExposure = 1; // Helligkeit anpassen

  return { scene, camera, renderer };
}

// ====================================================================
//                           BELEUCHTUNG
// ====================================================================

/**
 * F√ºgt Lichtquellen zur Szene hinzu
 * @param {THREE.Scene} scene - Die 3D-Szene
 */
export function setupLighting(scene) {
  console.log('üí° Richte Beleuchtung ein...');
  
  // Ambient Light - gleichm√§√üiges Grundlicht von √ºberall
  // Parameter: Farbe (wei√ü), Intensit√§t (12% = subtil)
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.12);
  scene.add(ambientLight);

  // Point Light - Punktlichtquelle mit Falloff
  // Parameter: Farbe (wei√ü), Intensit√§t (80%), Reichweite (40 Einheiten)
  const pointLight = new THREE.PointLight(0xffffff, 0.8, 40);
  pointLight.position.set(0, 5, 8); // Oberhalb und leicht vor dem Portal
  scene.add(pointLight);
}

// ====================================================================
//                        POST-PROCESSING
// ====================================================================

/**
 * Richtet Post-Processing-Effekte ein (Bloom-Glow)
 * @param {THREE.WebGLRenderer} renderer - Der WebGL Renderer
 * @param {THREE.Scene} scene - Die 3D-Szene
 * @param {THREE.PerspectiveCamera} camera - Die Kamera
 * @returns {Object} Composer und Bloom-Pass f√ºr weitere Kontrolle
 */
export function setupPostProcessing(renderer, scene, camera) {
  console.log('‚ú® Konfiguriere Post-Processing (Bloom)...');
  
  // Effect Composer - Pipeline f√ºr Nachbearbeitung
  const composer = new EffectComposer(renderer);
  
  // Render Pass - rendert die normale Szene
  composer.addPass(new RenderPass(scene, camera));
  
  // Bloom Pass - erzeugt Glow-Effekte um helle Objekte (REDUZIERT!)
  const bloomPass = new UnrealBloomPass(
    new THREE.Vector2(innerWidth, innerHeight), // Aufl√∂sung
    0.8,    // Bloom-St√§rke (reduziert: 1.2 ‚Üí 0.8)
    0.8,    // Radius (reduziert: 1 ‚Üí 0.8)
    0.3     // Schwellenwert (erh√∂ht: 0.2 ‚Üí 0.3, weniger Bloom)
  );
  bloomPass.threshold = 0.2; // H√∂herer Schwellenwert = weniger Bloom (0.1 ‚Üí 0.2)
  composer.addPass(bloomPass);

  return { composer, bloomPass };
}

// ====================================================================
//                      FENSTER RESIZE HANDLER
// ====================================================================

/**
 * Passt Szene bei Fenstergr√∂√üe-√Ñnderung an
 * @param {THREE.PerspectiveCamera} camera - Die Kamera
 * @param {THREE.WebGLRenderer} renderer - Der Renderer
 * @param {EffectComposer} composer - Der Post-Processing Composer
 * @param {Object} portalUniforms - Portal Shader Uniforms f√ºr Aufl√∂sung
 */
export function setupResizeHandler(camera, renderer, composer, portalUniforms) {
  window.addEventListener('resize', () => {
    console.log('üì± Passe Szene an neue Fenstergr√∂√üe an...');
    
    const w = innerWidth;
    const h = innerHeight;
    
    // Kamera-Seitenverh√§ltnis anpassen
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
    
    // Renderer-Gr√∂√üe anpassen
    renderer.setSize(w, h);
    composer.setSize(w, h);
    
    // Portal-Shader √ºber neue Aufl√∂sung informieren
    if (portalUniforms?.resolution) {
      portalUniforms.resolution.value.set(w, h);
    }
  });
}